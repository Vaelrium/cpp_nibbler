//
// MlxGfxParams.cpp for nibbler in /home/ganesha/projets/cpp_nibbler
//
// Made by Ambroise Coutarel
// Login   <ganesha@epitech.net>
//
// Started on  Mon Mar 23 15:40:15 2015 Ambroise Coutarel
// Last update Wed Mar 25 13:41:50 2015 Ambroise Coutarel
//

#include "mlx.h"
#include "MlxGfxParams.hpp"
#include <cstdlib>


MlxGfxParams::MlxGfxParams(int win_x, int win_y, leSnake *snek)
{
  this->win_x = win_x;
  this->win_y = win_y;
  this->data.win_x = win_x;
  this->data.win_y = win_y;
  this->data.mlx_ptr = mlx_init();
  this->data.win_ptr = mlx_new_window(this->data.mlx_ptr, win_x, win_y, "koujouSnake");
  this->data.img_ptr = mlx_new_image(this->data.mlx_ptr, win_x, win_y);
  this->data.img = mlx_get_data_addr(this->data.img_ptr, &(this->data.bpp),
				&(this->data.sizeline), &(this->data.endian));
  this->data.snake = snek;
  // this->win_x = win_x;
  // this->win_y = win_y;
  // this->mlx_ptr = mlx_init();
  // this->win_ptr = mlx_new_window(this->mlx_ptr, win_x, win_y, "koujouSnake");
  // this->img_ptr = mlx_new_image(this->mlx_ptr, win_x, win_y);
  // this->img = mlx_get_data_addr(this->img_ptr, &(this->bpp),
  // 				&(this->sizeline), &(this->endian));
  // this->snake = snek;
}

MlxGfxParams::~MlxGfxParams()
{
}

int	MlxGfxParams::getWin_x() const
{
  return (win_x);
}

int	MlxGfxParams::getWin_y() const
{
  return (win_y);
}

int	MlxGfxParams::getBpp() const
{
  return (bpp);
}

int	MlxGfxParams::getSizeline() const
{
  return (sizeline);
}

int	MlxGfxParams::getEndian() const
{
  return (endian);
}

// dump	*MlxGfxParams::getData()
// {
//   return (&(dump));
// }

int	MlxGfxParams::updateImg(dump *data)
{
  // int	x = 0, y = 0;

  // while (y != this->win_y)
  //   {
  //     while (x != this->win_x)
  // 	{
  // 	  /* check square for snek, fud or nothing*/
  // 	  ++x;
  // 	}
  //     ++y;
  //     x = 0;
  //   }
  return (0);
}

int	MlxGfxParams::move_snake(char dir, dump *data)
{
  if (dir)
    data->snake->setDir(RIGHT_DEC(data->snake->getDir()));
  else
    data->snake->setDir(LEFT_INC(data->snake->getDir()));
  updateImg(data);
  expose_redraw(data);
  return (0);
}


int	MlxGfxParams::key_event(int keycode, dump *data)
{
  if (keycode == ESCAPE)
    exit(0);
  else if (keycode == RIGHT)
    move_snake(1, data);
  else if (keycode == LEFT)
    move_snake(0, data);
  return (0);
}

int	MlxGfxParams::expose_redraw(dump *data)
{
  mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img_ptr, 0, 0);
  return (0);
}

// int	MlxGfxParams::key_event(int keycode)
// {
//   if (keycode == ESCAPE)
//     exit(0);
//   else if (keycode == RIGHT)
//     this->move_snake(1);
//   else if (keycode == LEFT)
//     this->move_snake(0);
//   return (0);
// }

// int	MlxGfxParams::expose_redraw()
// {
//   mlx_put_image_to_window(this->mlx_ptr, this->win_ptr, this->img_ptr, 0, 0);
//   return (0);
// }

int	MlxGfxParams::gameLoop()
{
  updateImg(&(this->data));
  mlx_put_image_to_window(this->data.mlx_ptr, this->data.win_ptr, this->data.img_ptr, 0, 0);
  mlx_key_hook(this->data.win_ptr, key_event, &(this->data));
  mlx_expose_hook(this->data.win_ptr, expose_redraw, &(this->data));
  mlx_loop(this->data.mlx_ptr);
}

// void	*MlxGfxParams::getMlxPtr() const
// {
//   return (mlx_ptr);
// }

// void	*MlxGfxParams::getWinPtr() const
// {
//   return (win_ptr);
// }

// void	*MlxGfxParams::getImgPtr() const
// {
//   return (img_ptr);
// }
